// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                 @id @default(autoincrement())
  email       String              @unique
  phoneNumber String              @unique
  username    String              @unique
  password    String
  role        UserRole?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?
  avatar      UserProfilePicture?
  tasks       Task[]

  @@map("users")
}

enum UserRole {
  SYSTEM_ADMIN
  SYSTEM_USER
}

model UserProfilePicture {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  fileName String
  fileType String
  fileSize Int
  user     User   @relation(fields: [userId], references: [id])
}

model Task {
  id          Int              @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  //TODO implement db logic to handle conditions like pending/shifted or...
  isCompleted Boolean          @default(false)
  attachment  TaskAttachment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isCompleted])
  @@map("tasks")
}

model TaskAttachment {
  id       Int    @id @default(autoincrement())
  taskId   Int    @unique
  fileName String
  fileType String
  fileSize Int
  task     Task   @relation(fields: [taskId], references: [id])
}
